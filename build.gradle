plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.3'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'jacoco'
	id "org.sonarqube" version "4.2.1.3168"
	id "org.flywaydb.flyway" version '8.0.0'


}
sonar {
	properties {
		property "sonar.java.coveragePlugin", "jacoco"
		property "sonar.projectKey", "I482269_pawsicarebe-s3_AYu4pdKx0upfW3vBJKqZ"
		property "sonar.token", "sqp_ac11e29c0558c9ea313ff85eb92abeb0e5ee9288"
		property "sonar.host.url", "http://localhost:9002/"
		property "sonar.projectName", "PawsiCareBE S3"
		property "sonar.qualitygate.wait", true
		property "sonar.coverage.exclusions", [
				'src/**/business/**/*DTO.*',
				'src/**/domain/config/**/*',
				'src/**/business/exceptions/**/*',
				'src/**/business/requests/**/*',
				'src/**/business/responses/**/*',
				'src/**/business/security/**/*',
				'src/**/business/impl/DoctorConverter*.*',
				'src/**/business/impl/ClientConverter*.*',
				'src/**/business/impl/PetConverter*.*',
				'src/**/business/impl/TokenConverter*.*',
				'src/**/controller/ClientController/*.*',
				'src/**/domain/**/*',
				'src/**/controller/EmailController/*.*',
				'src/**/controller/LoginController/*.*',
				'src/**/controller/PetController/*.*',
				'src/**/controller/DoctorController/*.*',
				'src/**/PawsiCareApplication.*',
				'src/**/persistence/**/**/**',
				'src/**/controller/**/*',
				'src/**/business/impl/ClientManagerImpl*.*',
				'src/**/business/impl/EmailManagerImpl*.*',
				'src/**/business/impl/RefreshTokenServiceImpl*.*'

		]
		property "sonar.coverage.jacoco.xmlReportPaths", "$rootDir/build/jacocoHtml/jacocoTestReport.html"
	}
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

def applicationPropertiesFile = file('src/main/resources/application.properties')

if (applicationPropertiesFile.exists()) {
	def properties = new Properties()
	applicationPropertiesFile.withInputStream { inputStream ->
		properties.load(inputStream)
	}

	flyway {
		url = properties.getProperty('spring.datasource.url')
		driver = 'com.mysql.cj.jdbc.Driver'
		user = properties.getProperty('spring.datasource.username')
		password = properties.getProperty('spring.datasource.password')
		baselineOnMigrate = false
	}
} else {
	throw new GradleException("application.properties file not found!")
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.jetbrains:annotations:24.0.0'
	implementation 'org.flywaydb:flyway-core'
	implementation 'mysql:mysql-connector-java:8.0.23'
	implementation 'org.flywaydb:flyway-mysql:8.4.4'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation "org.mockito:mockito-core:3.+"
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.cloud:spring-cloud-starter-bootstrap:4.0.4'
	testImplementation 'com.playtika.testcontainers:embedded-mysql:3.0.0-RC9'


}

jacoco {
	toolVersion = "0.8.9"
	reportsDirectory = layout.buildDirectory.dir("reports/jacoco")
}

jacocoTestReport {
	dependsOn(test)
}

jacocoTestReport {

	reports {
		xml.required = true
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}
	afterEvaluate {
			classDirectories.setFrom(files(classDirectories.files.collect{
				fileTree(dir: it, exclude: [
						'src/**/business/**/*DTO.*',
						'src/**/domain/config/**/*',
						'src/**/business/exceptions/**/*',
						'src/**/business/requests/**/*',
						'src/**/business/responses/**/*',
						'src/**/business/security/**/*',
						'src/**/business/security/token/**/*',
						'src/**/business/security/auth/**',
						'src/**/business/impl/DoctorConverter*.*',
						'src/**/business/impl/ClientConverter*.*',
						'src/**/business/impl/PetConverter*.*',
						'src/**/business/impl/TokenConverter*.*',
						'src/**/domain/ClientController/*.*',
						'src/**/domain/PetController/*.*',
						'src/**/domain/EmailController/*.*',
						'src/**/domain/LoginController/*.*',
						'src/**/domain/DoctorController/*.*',
						'src/**/PawsiCareApplication.*',
						'src/**/persistence/**/**/**',
						'src/**/controller/**/*',
						'src/**/business/impl/ClientManagerImpl*.*',
						'src/**/business/impl/EmailManagerImpl*.*',
						'src/**/domain/**/*',
						'src/**/business/impl/RefreshTokenServiceImpl*.*'
				])

			}))
	}
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}
